<molgenis name="org.molgenis">
	<module name="gene">
		<description>XGAP</description>
		<entity name="Locus" abstract="true">
			<description> position. Typical examples of such traits are genes,
				probes and markers. Common structure for entities that have a
				genomic</description>
			<field name="Chromosome" label="Chromosome" type="xref"
				xref_entity="Chromosome" xref_field="id" xref_label="name" nillable="true"
				description="Reference to the chromosome this
				position belongs to." />
			<field name="cM" label="cMPosition" type="decimal" nillable="true"
				description="genetic map position in centi morgan (cM)." />
			<field name="bpStart" label="Start (5')" type="long" nillable="true"
				description="numeric basepair postion (5') on the chromosome" />
			<field name="bpEnd" label="End" type="long" nillable="true"
				description="numeric basepair postion (3') on the chromosome" />
			<field name="Seq" type="text" nillable="true"
				description="The FASTA text representation of the sequence." />
			<field name="Symbol" type="varchar" nillable="true"
				description="todo" />
		</entity>
		<entity name="Chromosome" extends="ObservableFeature">
			<field name="orderNr" type="int" />
			<field name="isAutosomal" type="bool" description="Is 'yes' when number of chromosomes is equal in male and female individuals, i.e., if not a sex chromosome."/>
			<field name="bpLength" type="int" nillable="true" description="Lenght of the chromsome in base pairs."/>
			<field name="Species" label="Species" type="xref" xref_entity="Species"
				xref_field="id" xref_label="name" nillable="true"
				description="Reference to the species this
				chromosome belongs to." />
		</entity>
		<entity name="NMRBin" extends="ObservableFeature">
			<description> Shift of the NMR frequency due to the chemical
				environment.</description>
		</entity>
		<entity name="Clone" extends="ObservableFeature" implements="Locus">
			<description> BAC clone fragment.</description>
		</entity>
		<entity name="DerivedTrait" extends="ObservableFeature">
			<description> Any meta trait, eg. false discovery rates, P-values,
				thresholds.</description>
		</entity>
		<!--
		EnvironmentalFactor was previously magetab_idf.Factor which was xgap.Factor.
		The MAGE-TAB Factor only applies to intended (predefined) experimental
		conditions. For example: in a study where we want to find out what causes
		a certain disease, the disease is the factor. This is a bit too restrictive
		for XGAP/xQTL: we also want to model 'unforeseen' experimental conditions
		in the form of environmental factors. For example: the age/diet/weight/
		sex/bloodtype of subjects, time of drawing a sample, the day of harvesting
		an organ or plant, the lab worker which processed the sample or microarray,
		the normalization method used, and so on. The 'factor of interest' can also
		be included here, though usually it is simply added as a (binary) phenotype.
		For example: a ClassicalPhenotype named 'HasDisease'. EnvironmentalFactor is
		a special phenotype (ObservableFeature) because the value of the factor
		itself is also 'measured'.
		-->
		<entity name="EnvironmentalFactor" extends="ObservableFeature">
			<description>Experimental conditions,
			such as temperature differences, batch effects etc.</description>
		</entity>
		<entity name="Gene" extends="ObservableFeature" implements="Locus">
			<description> Trait annotations specific for genes.</description>
			<field name="Symbol" nillable="true"
				description="Main symbol this gene is known by (not necessarily unique, in constrast to 'name')" />
			<field name="Orientation" type="enum" enum_options="[F,R]"
				nillable="true"
				description="Orientation of the gene on the genome (F=forward, R=reverse)" />
			<field name="Control" type="bool" nillable="true"
				description="Indicating whether this is a 'housekeeping' gene that can be used as control." />
		</entity>
		<entity name="Transcript" extends="ObservableFeature">
			<description> Trait annotations specific for transcripts.
			</description>
			<!-- Question: Is there a specific notation involved that we can create 
				type for? -->
			<field name="Gene" label="Gene" type="xref" xref_entity="Gene"
				xref_field="id" xref_label="name" nillable="true"
				description="The gene that produces this protein" />
		</entity>
		<entity name="Protein" extends="ObservableFeature">
			<description> Trait annotations specific for proteins.</description>
			<!--
				Question: Is there a specific notation involved that we can create
				type for?
			-->
			<field name="Gene" label="Gene" type="xref" xref_entity="Gene"
				xref_field="id" xref_label="name" nillable="true"
				description="The gene that produces this protein" />
			<field name="Transcript" label="Transcript" type="xref" xref_entity="Transcript"
				xref_field="id" xref_label="name" nillable="true"
				description="The transcript variant that produces this protein" />
			<field name="AminoSequence" label="Sequence" type="text" nillable="true"
				description="The aminoacid sequence." />
			<field name="Mass" label="Mass" type="decimal" nillable="true"
				description="The mass of this metabolite" />
		</entity>
		<entity name="Metabolite" extends="ObservableFeature">
			<description> Trait annotations specific for metabolites.
			</description>
			<field name="Formula" label="Formula" type="varchar" length="128"
				nillable="true" description="The chemical formula of a metabolite." />
			<field name="Mass" label="Mass" type="decimal" nillable="true"
				description="The mass of this metabolite" />
			<field name="Structure" label="Structure" type="text" nillable="true"
				description="The chemical structure of a metabolite (in SMILES representation)." />
		</entity>
		<entity name="Marker" extends="ObservableFeature" implements="Locus">
			<description> Trait annotations specific for markers.</description>
			<field name="ReportsFor" nillable="true" type="mref" xref_field="id" xref_label="name"
				xref_entity="Marker" description="The marker (or a subclass like 'SNP') this marker (or a subclass like 'SNP') reports for." />
		</entity>
		<entity name="SNP" extends="Marker">
			<description>A SNP is a special kind of Marker, but can also be seen as a phenotype to map against in some cases. A single-nucleotide polymorphism is a DNA sequence variation occurring when a single nucleotide in the genome (or other shared sequence) differs between members of a biological species or paired chromosomes in an individual.</description>
			<field name="Status" nillable="true" description="The status of this SNP, eg 'confirmed'."/>
			<field name="Polymorphism" nillable="true" type="mref" xref_field="id" xref_label="name"
				xref_entity="Polymorphism" description="The polymorphism that belongs to this SNP." />
		</entity>
		<entity name="Polymorphism" extends="ObservableFeature">
			<description>The difference of a single base discovered between two sequenced individuals.</description>
			<field name="Base" type="enum" enum_options="[Reference,A,T,C,G]" nillable="false" description="The affected DNA base. Note that you can select the reference base here." />
			<field name="Value" nillable="true" description="The strain/genotype for which this polymorphism was discovered. E.g. 'N2' or 'CB4856'." />
		</entity>
		<entity name="Probe" extends="ObservableFeature" implements="Locus">
			<description> A piece of sequence that reports for the expression of
				a gene, typically spotted onto a microarray.</description>
			<field name="Mismatch" type="bool"
				description="Indicating whether the probe is a match" default="false" />
			<field name="ProbeSet" type="xref" nillable="true" xref_entity="ProbeSet"
				xref_field="id" xref_label="name"
				description="Optional: probeset this probe belongs to (e.g., in Affymetrix assays)." />
			<field name="ReportsFor" label="ReportsFor" type="xref" xref_entity="Gene"
				xref_field="id" xref_label="name" nillable="true"
				description="The gene this probe reports for." />
		</entity>
		<entity name="Spot" extends="Probe">
			<description>
				This is the spot on a microarray.
				<br />
				Note: We don't distinquish between probes (the sequence) and spots
				(the sequence as spotted on the array).
			</description>
			<field name="x" type="int" description="Row" />
			<field name="y" type="int" description="Column" />
			<field name="GridX" type="int" description="Meta Row" nillable="true" />
			<field name="GridY" type="int" description="Meta Column"
				nillable="true" />
			<unique fields="X,Y,GridX,GridY" />
		</entity>
		<entity name="ProbeSet" extends="ObservableFeature" implements="Locus">
			<description> A set of Probes. E.g. an Affymetrix probeset has multiple
				probes. It implements locus because sometimes you want to give the complete set of probes a range,
				for example: indicating that this set of probes spans basepair 0 through 10.000.000 on chromosome 3.
				The same information could arguably also be queried from the probes themselves, but if you have 40k probes,
				retrieving the same information from only ProbeSet (if annotated so) would be much faster.</description>
		</entity>
		<entity name="MassPeak" extends="ObservableFeature">
			<description> A peak that has been selected within a mass
				spectrometry experiment.</description>
			<field name="MZ" type="decimal" nillable="true"
				description="Mass over charge ratio of this peak." />
			<!--
				field name="Intensity" type="decimal" optional="true"
				description="Intensity of this peak." /
			-->
			<field name="RetentionTime" type="decimal" nillable="true"
				description="The retention-time of this peak in minutes." />
		</entity>
		<entity name="InvestigationFile" extends="MolgenisFile" implements="Describable">
			<field name="Investigation" type="xref" xref_entity="Investigation"
				description="Reference to the Study." />
		</entity>
		<entity name="Tissue" extends="OntologyTerm" description="Ontology of tissue. E.g. spleen" />
		<entity name="SampleLabel" extends="OntologyTerm"
			description="Ontology of sample labels. E.g. cy3, cy5" />
		<entity name="Sample" extends="ObservationTarget">
			<description></description>
			<field name="Individual" type="xref" xref_entity="Individual"
				xref_field="id" xref_label="name" nillable="true"
				description="The individual from which this sample was taken." />
			<field name="Tissue" type="xref" xref_entity="Tissue"
				xref_field="id" xref_label="name" nillable="true"
				description="The tissue from which this sample was taken." />
		</entity>
		<!--entity name="GenericObservationTarget" extends="ObservationTarget">
			<description>Generic implementation of ObservationTarget for
				applications that choose not to choose subclasses such as Individual
				or Panel. NOT NEEDED? ObservationTarget is not abstract</description>
		</entity-->
		<entity name="PairedSample" extends="ObservationTarget">
			<description> A pair of samples labeled for a two-color microarray
				experiment.</description>
			<field name="Subject1" type="xref" xref_entity="Individual"
				xref_field="id" xref_label="name" description="The first subject" />
			<field name="Label1" type="xref" xref_entity="SampleLabel"
				xref_field="id" xref_label="name" nillable="true"
				description="Which channel or Fluorescent labeling is associated with the first subject" />
			<field name="Subject2" type="xref" xref_entity="Individual"
				xref_field="id" xref_label="name" description="The second sample" />
			<field name="Label2" type="xref" xref_entity="SampleLabel"
				xref_field="id" xref_label="name" nillable="true"
				description="Which channel or Fluorescent labeling is associated with the second subject" />
		</entity>
	</module>
	<module name="pheno">
		<description>Pheno is an generic version of XGAP developed in close
			collaboration within GEN2PHEN, EBI, UMC Groningen, U Groningen, FIMM,
			U Leicester. Todo: add docs again from pheno model. The pheno core
			needs to be preserved! Add changelog special section.
		</description>

		<entity name="Species" extends="OntologyTerm">
			<description>Ontology terms for species. E.g. Arabidopsis thaliana.
				DISCUSSION: should we avoid subclasses of OntologyTerm and instead
				make a 'tag' filter on terms so we can make pulldowns context
				dependent (e.g. to only show particular subqueries of ontologies).
			</description>
		</entity>
		<entity name="AlternateId" extends="OntologyTerm">
			<description>
				An external identifier for an annotation. For example: name='R13H8.1', ontology='ensembl' or name='WBgene00000912', ontology='wormbase'.
			</description>
		</entity>
		<entity name="ObservationElement" implements="InvestigationElement"
			xref_label="name">
			<description> Elements that are the targets or features we are
				looking at of our research.
			</description>
			<field name="AlternateId" nillable="true" type="mref"
				xref_entity="AlternateId" label="Alternative identifiers"
				description="Alternative identifiers or symbols that this element is known by." />
			<field name="label" nillable="true"
				description="User friendly textual representation of this ObservationElement. For example: 'male',
				'mouse 3 in cage 7' or 'TRA-2 like protein'. Label allows for human-readable name that is potentially not unique." />
			<unique fields="name" />
		</entity>
		<entity name="ObservationTarget" extends="ObservationElement">
			<description> An ObservationTarget class defines the subjects of
				observation. For instance: individual 1 from Investigation x. The
				ObservationTarget class maps to XGAP:Subject, METABASE:Patient and
				maps to Page:Abstract_Observation_Target. The name of
				observationTargets is unique.
			</description>
		</entity>
		<entity name="ObservableFeature" extends="ObservationElement">
			<description>ObservableFeature defines anything that can be observed
				in a phenotypic Investigation. For instance: Height, Systolic blood
				pressure, Diastolic blood pressure, and Treatment for hypertension
				are observable features. The name of ObservableFeature is unique
				within one Investigation. It is recommended that each
				ObservableFeature is named according to a well-defined ontology term
				which can be specified via ontologyReference. Note that in some
				instances an observableFeature can also be an observationTarget, for
				example in the case of correlation matrices. The ObservableFeature
				class maps to XGAP:Trait, METABASE:Question, FuGE:DimensionElement,
				and PaGE:ObservableFeature. Multi-value features can be grouped by
				Protocol. For instance: high blood pressure can be inferred from
				observations for features systolic and diastolic blood pressure.
				There may be many alternative protocols to measure a feature. See
				Protocol section.
			</description>
		</entity>
		<entity name="Measurement" extends="ObservableFeature"
			decorator="decorators.MeasurementDecorator">
			<description>Generic obserable feature to flexibly define a
				measurement
			</description>
			<field name="unit" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the well-defined measurement unit used to observe this feature 
					(if feature is that concrete). E.g. mmHg" />
			<field name="dataType" type="enum" default="string"
				enum_options="[xref,string,categorical,date,datetime,int,code,image,decimal,bool,file,log,data,exe]"
				description="(Optional) Reference to the technical data type. E.g. 'int'" />
			<!-- each enum code is defined in MolgenisFieldTypes to automatically 
				generate UI. -->
			<field name="temporal" type="boolean" default="false"
				description="Whether this feature is time dependent and can have different values when measured 
					on different times (e.g. weight, temporal=true) or generally only measured once (e.g. birth date, 
					temporal=false) "/>
			<field name="categories" type="mref" xref_entity="Category" nillable="true" description="Translation of codes into categories if applicable"/>
			<field name="description" type="text" nillable="true"
				description="(Optional) Rudimentary meta data about the observable feature. Use of ontology 
					terms references to establish unambigious descriptions is recommended" />
			<field name="targettypeAllowedForRelation" type="xref"
				xref_entity="MolgenisEntity"
				description="Subclass of ObservationTarget (Individual, Panel or Location) that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result in ObservedValues 
					that have relations to Panels)"
				nillable="true" label="ObservationTarget type allowed for relation" />
			<field name="panelLabelAllowedForRelation" type="string"
				description="Label that must have been applied to the Panel that
					can be linked to (through the 'relation' field in ObservedValue) when using this 
					Measurement (example: a Measurement 'Species' can only result
					in ObservedValues that have relations to Panels labeled as 'Species')"
				nillable="true" label="Panel label allowed for relation" />
		</entity>
		<entity name="Category" extends="ObservationElement">
			<description>Special kind of ObservationElement to define categorical answer codes such as are
				often used in Questionaires. A list of categories can be attached to an
				Measurement using Measurement.categories. For example the
				Measurement 'sex' has {code_string = 1, label=male} and {code_string = 2,
				label=female}. Categories can be linked to well-defined ontology terms
				via the ontologyReference. Category extends ObservationElement such that
				it can be referenced by ObservedValue.value. The Category class maps
				to METABASE::Category
			</description>
			<field name="code_string" type="string"
				description="The code used to represent this category. For example: { '1' codes for 'male', '2'-'female'}" />
			<field name="description" type="text"
				description="Description of the code.
				Use of ontology terms references to establish unambigious descriptions is
				recommended" />
			<field name="isMissing" type="bool" default="false"
				description="whether this code should be treated as missing value." />
		</entity>
		<entity name="Individual" extends="ObservationTarget">
			<description> The Individuals class defines human cases that are used
				as observation target. The Individual class maps to XGAP:Individual
				and PaGE:Individual. Note that minimal information like 'sex' can be
				defined as ObservedValue, and that that basic relationships like
				'father' and 'mother' can also be defined via ObservedRelationship,
				using the 'relation' field. Groups of individuals can be defined via
				Panel.
			</description>
			<field name="Mother" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the mother of the individual." />
			<field name="Father" type="xref" nillable="true" xref_entity="Individual"
				xref_field="id" xref_label="name" description="Refers to the father of the individual." />
		</entity>
		<entity name="Location" extends="ObservationTarget">
			<description>This class defines physical locations such as buildings,
				departments, rooms, freezers and cages. Use ObservedValues to link
				locations to eachother, to build a location hierarchy.
			</description>
		</entity>
		<entity name="Panel" extends="ObservationTarget">
			<description>The Panel class defines groups of individuals based on
				cohort design, case/controls, families, etc. For instance: LifeLines
				cohort, 'middle aged man', 'recombinant mouse inbred Line dba x b6'
				or 'Smith family'. A Panel can act as a single ObservationTarget.
				For example: average height (ObservedValue) in the LifeLines cohort
				(Panel) is 174cm. The Panel class maps to XGAP:Strain and PaGE:Panel
				classes. In METABASE this is assumed there is one panel per study.
			</description>
			<field name="Individuals" type="mref" xref_entity="Individual"
				nillable="true" description="The list of individuals in this panel" />
			<field name="Species" type="xref" nillable="true" xref_entity="Species"
				xref_field="id" xref_label="name"
				description="The species this panel is an instance of/part of/extracted from." />
			<field name="PanelType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="Indicate the type of Panel (example: Natural=wild type, Parental=parents of a cross, F1=First generation of cross, RCC=Recombinant congenic, CSS=chromosome substitution)" />
			<field name="FounderPanels" type="mref" nillable="true"
				xref_entity="Panel" xref_field="id" xref_label="name"
				description="The panel(s) that were used to create this panel." />
		</entity>
		<entity name="Observation" abstract="true" implements="Identifiable">
			<description>
				Generic model for observations, that is, the observed value on a
				feature-target pair given a protocol. See the 'data' package for all
				kinds of observations. Typically, this data is visualized in a
				spreadsheet format having rows (targets) and columns (features). Use
				cases that need support are:
				<ul>
					<li>Simple text/int values, e.g. 'length in cm (row;
						observableFeature) of individual1 (col; observationTarget) = 179
						(value). These can be stored in subclass 'ObservedValue'
					</li>
					<li>Relationship values, e.g. 'individual 1(row:observationtarget)
						and individual2 (col:observationtarget) = brothers
						(value:observabvlefeature). These can be stored in subclass
						'ObservedValue'
					</li>
					<li>Categoryd values, e.g. 'invidual 1 (row) and feature 'sex'
						(col) = 'male' (value; reference to code or ontology. These can be
						stored in subclass 'ObservedValue'
					</li>
					<li>Data file values, e.g., 'aligned.bam' or 'plink imputed'
						(feature). These can be stored in subclass DataFile
					</li>
					<li>Data matrices, e.g. 'qtlProfile' (feature) for 'bxd panel'
						(target). These can be stored in subclass ObservedData
					</li>
					<li>Measurements are typically grouped by the protocol used,
						therefore a link to protocol application is added.
					</li>
				</ul>
				Implementation wise, the data may or may not be stored in the
				database directly. This is an optimization strategy independent of
				this generic structure. This structure is born out of the merger of
				Pheno-OM, XGAP and MAGE-TAB.<!-- The original documentation: <br /> Generic 
					data structure for aiming the values of a data set as described in Data. 
					Each DataElement describes a cell in a data matrix of rows (from) and columns 
					(to), e.g., in "dataset X" it was measured that geneX (col) relates to geneZ 
					(row). <br /> MAGE-TAB 1.1. has the column ArrayDataMatrix and DerivedArrayDataMatrix. 
					The formats of both types are tab-delimited and the distinction is that an 
					ArrayDataMatrix is raw data and the DerivedArrayDataMatrix is processed data. 
					The DerivedArrayDataMatrix associates a file of a specific format - see the 
					MAGE-TAB specification for details. In order to index the Rows and Columns 
					of DataMatrix we have generated a DimensionElement that allows us to index 
					DimensionRow and DimensionColumn. -->
			</description>
			<field name="Investigation" type="xref" xref_entity="Investigation"
				nillable="true" />
			<field name="protocolApplication" type="xref" xref_entity="ProtocolApplication"
				nillable="true"
				jpaCascade="CascadeType.MERGE, CascadeType.PERSIST, CascadeType.REFRESH"
				description="Reference to the protocol application that was used to produce this observation. For example a particular patient visit or the application of a microarray or the calculation of a QTL model" />
			<description>FIXME: change to ObservableFeature?</description>
			<field name="Feature" type="xref" xref_entity="ObservationElement"
				xref_field="id" xref_label="name"
				description="References the ObservableFeature that this observation was made on. For example 'probe123'. Can be ommited for 1D data (i.e., a data list)." />
			<description>FIXME: change to ObservationTarget?</description>
			<field name="Target" type="xref" xref_entity="ObservationElement"
				xref_field="id" xref_label="name"
				description="References the ObservationTarget that this feature was made on. For example 'individual1'. In a correlation matrix this could be also 'probe123'." />
		</entity>
		<entity name="ObservedValue" implements="Observation">
			<description>
				Generic storage of values, relationships and optional ontology
				mapping of the value/relation. Values can be atomatic observations,
				e.g., length (feature) of individual 1 (target) = 179cm (value).
				Values can also be relationship values, e.g., extract (feature) of
				sample 1 (target) = derived sample (relation).
				<br />
				Discussion: how to model sample pooling in this model?
				<br />
				More Discussion: do we want to have type specific subclasses? No,
				because you can solve this by casting during querying?
			</description>
			<field name="ontologyReference" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the
				ontology definition or 'code' for this value (recommended for non-numeric
				values such as codes)" />
			<field nillable="true" name="value" description="The value observed" />
			<field nillable="true" name="relation" type="xref"
				xref_entity="ObservationElement"
				description="Reference to other end of the relationship, if any. For example to a 'brother' or from 'sample' to 'derivedSample'." />
			<field nillable="true" auto="false" name="time" type="datetime"
				description="(Optional) Time when the value was observed. For example in time series or if feature is time-dependent like 'age'" />
			<field nillable="true" auto="false" name="endtime" type="datetime"
				description="(Optional) Time when the value's validity ended" />
		</entity>
	</module>
	<module name="core">
		<description>Generic entities you can use as the starting point of
			your model.</description>
		<entity name="Identifiable" abstract="true">
			<description>This interface assigns an automatic 'id' field to every
				object.</description>
			<field name="id" type="autoid" description="automatically generated id" />
		</entity>
		<entity name="Nameable" abstract="true" decorator="decorators.NameableDecorator"
			implements="Identifiable">
			<description>This interface extends Identifiable with a unique 'name'
				field. The name length can be stored in one byte. (Java has signed
				integers) The name is by itself not unique, this should be enforced
				within a certain context. For example, unique(name, study) to make
				the name unique within one single study. The NameableDecorator
				ensures that names don't lead to problems in R and other script
				environments.</description>
			<field name="name" length="127" type="varchar" description="human-readable name." />
		</entity>
		<entity name="Describable" abstract="true" >
			<description>This interface adds a description field to all entities
				the implement it.</description>
			<field name="description" type="text" nillable="true"
				description="description field" />
		</entity>
		<entity name="OntologyTerm" xref_label="name" implements="Nameable">
			<description>
				OntologyTerm defines a single entry (term) from an ontology or a
				controlled vocabulary (defined by Ontology). The name is the
				ontology term which is unique within an ontology source, such as
				[examples here]. Other data entities can reference to this
				OntologyTerm to harmonize naming of concepts. Each term should have
				a local, unique label within the Investigation. If no suitable
				ontology term exists then one can define new terms locally (in which
				case there is no formal accession for the term limiting its use for
				cross-Investigation queries). In those cases the local name should
				be repeated in both term and termAccession. Maps to
				FuGE::OntologyIndividual; in MAGE-TAB there is no separate entity to
				model terms.
				<br />
				Optionally a local controlled vocabulary or ontology can be defined,
				for example to represent 'Codelists' often used in questionaires.
				Note: this is not a InvestigationElement because of the additional
				xref_label and unique constraint.This class defines a single entry
				from an ontology or a controlled vocabulary.
				<br />
				If it is a simple controlled vocabulary, there may be no formal
				accession for the term. In these cases the local name should be
				repeated in both term and termAccession. If the term has a value,
				the OntologyTerm will have a single DataProperty whose value was the
				value for the property. For instance, for an OntologyIndividual
				based on the MO ontology the attributes might be: The term would be
				what is usually called the local name in the Ontology, for instance
				'Age'; The termAccession could be
				'http://mged.sourceforge.net/ontologies/MGEDOntology.owl#Age' or a
				an arbitrary accession if one exists; The identifier is a unique
				identifier for individuals in the scope of the FuGE instance; The
				inherited name attribute should not be used; The ontologyURI of
				OntologySource could be
				'http://mged.sourceforge.net/ontologies/MGEDOntology.owl&quot;. The
				OntologyTerm subclasses are instances of Ontology classes and
				properties, not the actual terms themselves. An OntologyIndividual,
				if based on an existing Ontology, can be considered a statement that
				can be validated against the referenced ontology. The subclasses and
				their associations are based on the Ontology Definition Model,
				ad/2005-04-13, submitted to the OMG as a response to RFP
				ad/2003-03-40, Copyright 2005 DSTC Pty Ltd. Copyright 2005 IBM
				Copyright 2005 Sandpiper Software, Inc under the standard OMG
				license terms. 
			</description>
			<field auto="false" name="ontology" type="xref" nillable="true"
				description="(Optional) The source ontology or controlled vocabulary list that ontology terms have been obtained from."
				xref_entity="Ontology" />
			<field nillable="true" auto="false" name="termAccession" type="varchar"
				description="(Optional) The accession number assigned to the ontology term in its source ontology. If empty it is assumed to be a locally defined term. " />
			<field nillable="true" auto="false" name="definition" type="string"
				description="(Optional) The definition of the term." />
			<unique fields="ontology,termAccession"
				description="The term accession is unique within an Ontology" />
			<field nillable="true" auto="false" name="termPath" type="varchar"
				length="1024"
				description="EXTENSION. The Ontology Lookup Service path that contains this term." />
			<unique fields="ontology,name" description="ADDITION: Name is unique within its type " />
		</entity>
		<entity name="Ontology" implements="Nameable" xref_label="name">
			<description> Ontology defines a reference to a an ontology or
				controlled vocabulary from which well-defined and stable (ontology)
				terms can be obtained. Each Ontology should have a unique name, for
				instance: Gene Ontology, Mammalian Phenotype, Human Phenotype
				Ontology, Unified Medical Language System, Medical Subject Headings,
				etc. Also a abbreviation is required, for instance: GO, MP, HPO,
				UMLS, MeSH, etc. Use of existing ontologies/vocabularies is
				recommended to harmonize phenotypic feature and value descriptions.
				But one can also create a 'local' Ontology. The Ontology class maps
				to FuGE::Ontology, MAGE-TAB::TermSourceREF.</description>
			<field auto="false" name="ontologyAccession" type="string"
				nillable="true"
				description="A identifier that uniquely identifies the ontology (typically an acronym). E.g. GO, MeSH, HPO." />
			<field nillable="true" auto="false" name="ontologyURI" type="hyperlink"
				description="(Optional) A URI that references the location of the ontology." />
			<unique fields="name" description="Name is unique within its type " />
		</entity>
		<!--
			<entity name="MolgenisUserGroup" system="true" implements="Nameable">
			<description>A unit to collect users togethers as 'members' and then
			set view and/or edit permissions for all of them together. If a user
			is allowed to edit he/she is also allowed to view the data.
			</description> <field name="members" type="mref"
			xref_entity="MolgenisUser" description="references to of zero or more
			users that are members of this group" /> <field name="allowedToView"
			type="mref" xref_entity="MolgenisEntity" description="list of zero or
			more entities the members of this usergroup may view." /> <field
			name="allowedToEdit" type="mref" xref_entity="MolgenisEntity"
			description="list of zero or more entities the members of this
			usergroup may edit." /> <field name="viewAll" type="bool"
			default="false" description="when set to true the group members can
			view all entities" /> <field name="editAll" type="bool"
			default="false" description="when set to true the group members can
			edit all entities (making them superuser). DISCUSSION: should exclude
			system entities?" /> </entity> <entity name="MolgenisUser"
			system="true" implements="Nameable"> <description>Anyone who can
			login</description> <field name="password" description="password of
			this user (needs to be md5)" /> <field name="superuser"
			label="isSuperuser" type="bool" default="false" description="if set
			to true this user can edit all entities irrespective of the group
			rights." /> <field name="active" type="bool" default="true" />
			</entity> <entity name="MolgenisEntity" system="true"
			implements="Nameable"> <description> Referenceable catalog of entity
			names, that are the data types used by the permission
			system.</description> <field name="className" description="Full
			classpath name of the entity type" /> </entity>
		-->
		<entity name="MolgenisFile" implements="Nameable"
			decorator="decorators.MolgenisFileDecorator"  xref_label="name">
			<description>
				Helper entity to deal with files. Has a decorator to regulate
				storage and coupling to an Entity. Do not make abstract because of
				subtyping. This means the names of the subclasses will be used to
				distinguish MolgenisFiles and place them in the correct folders.
				<br />
				MS: make it use the &lt;field type="file" property under the hood. 
				<br />
				MS: where do the mimetypes go? I mean, I don't see the added value
				now.
			</description>
			<field name="Extension" nillable="false" length="8"
				description="The file extension. This will be mapped to MIME type at runtime. For example, a type 'png' will be served out as 'image/png'." />
			<unique fields="name"/>
		</entity>
		<entity name="RuntimeProperty" implements="Nameable"  system="true" xref_label="name">
			<field name="Value" length="127" type="varchar" nillable="false" />
			<unique fields="name" description="Name is unique within its type " />
		</entity>
		<entity name="Publication" implements="Nameable">
			<description>
				Publication is part of the Investigation package and is used to
				represent information about one or more publications related to an
				Investigation. The publication need not only be primary publication
				for an Investigation but may also represent other related
				information- though this use is less common. Publications have
				attributes of publications Authors and also DOI and Pubmed
				identifiers (when these are available). These are represented as
				OntologyTerms as in the MAGE-TAB model all 'xrefs' (cross
				references) for ontologies and accession numbers are handled
				generically. An example of a publication is available in an IDF file
				from ArrayExpress is experiment E-MTAB-506
				<a
					href="ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt">ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt
				</a>
				.
				<br />
				The FuGE equivalent to Publication is FuGE::Bibliographic Reference.
			</description>
			<field name="PubmedID" label="Pubmed ID" type="xref"
				xref_entity="OntologyTerm" nillable="true" />
			<field name="DOI" label="Publication DOI" nillable="true" type="xref"
				xref_entity="OntologyTerm" />
			<field name="authorList" type="text"
				description="The names of the authors of the publication" nillable="true" />
			<!--
				using name instead! field name="Title" label="Publication Title"
				description="The title of the Publication" nillable="true"/
			-->
			<field name="Title" label="Publication Title" description="The title of the Publication" index="true"/>
			<field name="Status" label="Publication Status" description="The status of the Publication"
				type="xref" xref_entity="OntologyTerm" nillable="true" />
			<!--
				was like this : <field name="Status" label="Publication Status"
				description="The status of the Publication" type="xref"
				xref_field="OntologyTerm.id" nillable="true" />
			-->
			<field name="Year" nillable="true" label="Publication Year" description="The year of the Publication" />
			<field name="Journal" nillable="true" label="Journal Title" description="The title of the Journal" />
			<unique fields="Name" />
		</entity>
		<entity name="UseCase" label="Use Cases"  xref_label="UseCaseName">
			<description> All the use cases send to the server are stored in this
				entity .</description>
			<field name="UseCaseId" type="autoid" />
			<field name="UseCaseName" type="string" unique="true"/>
			<field name="SearchType" type="string" />
		</entity>
		<entity name="MolgenisEntity" system="true" implements="Identifiable" xref_label="className" >
			<description>Referenceable catalog of entity names, menus, forms and
				plugins.</description>
			<field name="name" description="Name of the entity" />
			<field name="type_" description="Type of the entity" />
			<field name="className" unique="true" description="Full name of the entity" />
			<unique fields="name,type_" />
		</entity>
	</module>
	<module name="organization">
		<description>Generic entities you can use as the starting point of
			your model.</description>
		<entity name="Investigation" implements="Nameable,Describable" xref_label="name">
			<description>Investigation defines self-contained units of study. For
				example: Framingham study. Optionally a description and an accession
				to a data source can be provided. Each Investigation has a unique
				name and a group of subjects of observation (ObservableTarget),
				traits of observation (ObservableFeature), results (in
				ObservedValues), and optionally actions (Protocols,
				ProtoclApplications). 'Invetigation' maps to standard XGAP/FuGE
				Investigation, MAGE-TAB Experiment and METABASE:Study.</description>
			<field name="startDate" nillable="true"  type="datetime" description="The start point of the study." auto="true" />
			<field name="endDate" nillable="true" auto="false" type="datetime" description="The end point of the study." />
			<field name="contacts" type="mref" xref_entity="Person"
				nillable="true" description="Contact persons for this study"/>	
			<!-- field name="description" type="text" nillable="true"
				description="(Optional) Rudimentary meta data about the Investigation" / -->>
			<field name="accession" type="hyperlink" nillable="true"
				description="(Optional) URI or accession number to indicate source of Study. E.g. arrayexpress:M-EXP-2345" />
			<unique fields="name" description="Name is unique" />
		</entity>
		<entity name="InvestigationElement" abstract="true" implements="Nameable,Describable"
			xref_label="name">
			<description>General superclass to use for all elements of an
				Investigation. The unique forces all of these elements to have
				unique names within one Investigation. (can be changed to
				Name,Study,Type by flipping a boolean in the molgenis 'Unique'
				class.)</description>
			<field name="Investigation" type="xref" xref_label="name"
				xref_entity="Investigation" nillable="true"
				description="Reference to the Study that this data element is part of" />
			<field name="ontologyReference" type="mref" xref_entity="OntologyTerm"
				nillable="true"
				description="(Optional) Reference to the formal ontology definition for this element, e.g. 'Animal' or 'GWAS protocol'" />
			<unique fields="name,Investigation" description="Name is unique within an Investigation" />
		</entity>
	</module>
<module name="protocol">
		<description>This package is a merger of FUGE, XGAP, MAGE-TAB and
			Pheno-OM classes dealing with protocols. Discussion: are protocols
			study specific, i.e., are they InvestigationElements?
		</description>
		<entity name="Protocol" implements="InvestigationElement">
			<description>
				The Protocol class defines parameterizable descriptions of methods;
				each protocol has a unique name within an Study. Each
				ProtocolApplication can define the ObservableFeatures it can
				observe. Also the protocol parameters can be modeled using
				ObservableFeatures (Users are expected to 'tag' the observeable
				feature by setting ObserveableFeature type as 'ProtocolParameter'.
				Examples of protocols are: SOP for blood pressure measurement used
				by UK biobank, or 'R/qtl' as protocol for statistical analysis.
				Protocol is a high level object that represents the details of
				protocols used during the investigation. The uses of Protocols to
				process BioMaterials and Data are referenced by ProtocolApplication
				(in the SDRF part of the format). Protocol has an association to
				OntologyTerm to represent the type of protocol. Protocols are
				associated with Hardware, Software and Parameters used in the
				Protocol. An example from ArrayExpress is E-MTAB-506
				<a
					href="ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt">
					ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.
				</a>
				<br />
				The FUGE equivalent to Protocol is FuGE::Protocol.
				<br />
				The Protocol class maps to FuGE/XGAP/MageTab Protocol, but in
				contrast to FuGE it is not required to extend protocol before use.
				The Protocol class also maps to METABASE:Form (note that components
				are solved during METABASE:Visit which can be nested). Has no
				equivalent in PaGE.
			</description>
			<field name="ProtocolType" type="xref" xref_entity="OntologyTerm"
				nillable="true"
				description="annotation of the protocol to a well-defined ontological class." />
			<field name="description" type="richtext" nillable="true"
				description="Description, or reference to a description, of the protocol" />
			<!-- TOMASZ: Changed xref_entity=ObservableFeature to ObservationElement, 
				as ObservableFeature/ObservationTarget was merged into ObservationElement 
				in the phenoflow model -->
			<field name="Features" type="mref" xref_entity="ObservableFeature"
				nillable="true"
				description="The features that can be observed using this protocol. For example 'length' or 'rs123534' or 'probe123'. Also protocol parameters are considered observable features as they are important to the interpretation of the observed values." />
			<!-- TODO/discussion: does the field below work? -->
			<field name="TargetFilter" type="string" nillable="true"
				description="Expression that filters the InvestigationElements that can be targetted using this protocol.
				This helps the user to only select from targets that matter when setting observedvalues. For example: type='individual' AND species = 'human'" />
			<field name="Contact" type="xref" nillable="true" xref_entity="Person"
				description="TODO Check if there can be multiple contacts." />
			<field name="subprotocols" type="mref" xref_entity="Protocol" nillable="true" description="Subprotocols of this protocol"/>
			<!-- TODO/discussion: add the fields below? -->
			<!-- <field name="targettypeAllowedForApplication" type="xref" xref_entity="MolgenisEntity" 
				description="Subclass of ObservationTarget (Individual, Panel or Location) 
				that this Protocol can only be applied to (example: a Protocol 'SetSpecies' 
				can only be applied to Panels)" nillable="true" label="ObservationTarget 
				type allowed for application" /> <field name="panelLabelAllowedForApplication" 
				type="string" description="Label that must have been applied to the Panel 
				that this Protocol can be applied to (example: a Protocol 'SetSpecies' can 
				only be applied to Panels labeled as 'Species')" nillable="true" label="Panel 
				label allowed for application" /> -->
		</entity>
		<entity name="ProtocolApplication" implements="InvestigationElement">
			<description>
				A ProtocolApplication class defines the actual action of observation
				by refering to a protocol and optional ParameterValues. The name
				field can be used to label applications with a human understandeable
				tag. For example: the action of blood pressure measurement on 1000
				individuals, using a particular protocol, resulting in 1000
				associated observed values. If desired, protocols can be shared
				between Studys; in those cases one should simply refer to a protocol
				in another Study.
				<br />
				ProtocolApplications are used in MAGE-TAB format to reference to
				protocols used, with optionally use of certain protocol parameter
				values. For example, a Source may be transformed into a Labeled
				Extract by the subsequent application of a Extraction and Labeling
				protocol. ProtocolApplication is associated with and Edge that links
				input/output, e.g. Source to Labeled Extract. The order of the
				application of protocols can be set in order to be able to
				reconstruct the left-to-right order of protocol references in
				MAGE-TAB format. The FuGE equivalent to ProtocolApplication is
				FuGE:ProtocolApplication, however input/output is modeled using
				Edge.
				<br />
				The ProtocolApplication class maps to FuGE/XGAP ProtocolApplication,
				but in FuGE ProtocolApplications can take Material or Data (or both)
				as input and produce Material or Data (or both) as output. Similar
				to PaGE.ObservationMethod. Maps to METABASE:Visit (also note that
				METABASE:PlannedVisit allows for planning of protocol applications;
				this is outside scope for this model?).
			</description>
			<field auto="true" name="time" type="datetime"
				description="time when the protocol was applied." />
			<field name="protocol" type="xref" xref_entity="Protocol"
				nillable="true" description="Reference to the protocol that is being used." />
			<field name="Performer" type="mref" xref_entity="Person"
				nillable="true" />
		</entity>
		<entity name="ProtocolDocument" extends="MolgenisFile">
			<field name="protocol" type="xref" xref_entity="Protocol" />
			<field name="document" type="file"/>
		</entity>
		<entity name="Workflow" extends="Protocol" implements="Identifiable,Nameable">
			<description>A workflow is a plan to execute a series of subprotocols
				in a particular order. Each workflow elements is another protocol as
				refered to via WorkflowElement. Because Workflow extends Protocol,
				workflows can be nested just as any other protocol.
			</description>
			<unique fields="name" />
		</entity>
		<entity name="WorkflowElement" implements="Nameable"
			xref_label="name">
			<description>Elements of a workflow are references to protocols. The
				whole workflow is a directed graph with each element pointing to the
				previousSteps that the current workflow element depends on.
			</description>
			<field name="Workflow" type="xref" xref_entity="Workflow"
				xref_label="name" description="Workflow this element is part of" />
			<field name="protocol" type="xref" xref_entity="Protocol"
				description="Protocol to be used at this workflow step" />
			<field name="PreviousSteps" type="mref" xref_entity="WorkflowElement"
				nillable="true"
				description="Previous steps that need to be done before this protocol can be executed." />
			<!-- <field name="ExecutionTime" nillable="true" type="text" description="Predicted 
				execution time" default="23:59:00" / -->
			<unique fields="name" />
			<!-- field name="Defaults" type="mref" xref_entity="ObservedValue" nillable="true" 
				description="Default values of compute protocol features, which should be 
				defined on workflow element level" / -->
		</entity>
		<entity name="WorkflowElementParameter" implements="Identifiable">
			<description>Element parameters are the way to link workflow elements
				together. It allows override of the parameters from the previous
				step.
			</description>
			<field name="WorkflowElement" type="xref" xref_entity="WorkflowElement"
				description="To attach a parameter to a WorkflowElement" />
			<field name="Parameter" type="xref" xref_entity="ObservableFeature"
				description="Parameter definition." />
			<field name="Value"
				description="Value of this parameter. Can be a template of form ${other} refering to previous values in context." />
			<unique fields="WorkflowElement,Parameter" description="Feature value is set only once per element"/>
		</entity>
		<!-- DISCUSSION: we added ComputeFeature, ComputeElement and ComputeValue 
			for understandability. But I think we don't need them (and actually we are 
			better off without: we don't care about ComputeFeature as we want to be able 
			to use any feature; we don't care about ComputeValue as we want any ObservedValue, 
			and ComputeElement is just as WorkflowElement. Possibly we want ComputeWorkflow 
			so we can validate if all elements are ComputeProtocols). Proposal, move 
			the remaining stuff to protocol.xml. -->
		<description>Molgenis compute framework that extends the molgenis
			protocol framework adding the computational details
		</description>
		<!-- entity name="ProtocolOutput" implements="Observation"> <description>Initial 
			proposal of specifying output for error handling</description> <field name="name" 
			type="text" description="name of the output"/> <field name="pathTemplate" 
			type="text" description="template of the path to the output"/> <field name="Inputs" 
			type="mref" xref_entity="ComputeFeature" label="Inputs" nillable="true" description="input 
			parameters used to define path to the output"/> <field name="type" type="enum" 
			enum_options="[file,table,string]" default="file" description="type of the 
			expected output"/> <field name="data_type" type="enum" enum_options="[data,log]" 
			description="specifies, if produced data is data or a log"/> </entity> -->
	</module>
	<module name="auth">
		<entity name="MolgenisRole" system="true" implements="Identifiable" xref_label="name" >
			<field name="name" unique="true" />
		</entity>

		<entity name="MolgenisGroup" extends="MolgenisRole" system="true">
			<!--
			<field name="members" type="mref" xref_field="MolgenisUser.id" xref_label="name" />
			-->
		</entity>

		<entity name="MolgenisRoleGroupLink" system="true" implements="Identifiable">
			<field name="group_" type="xref" xref_field="MolgenisGroup.id" xref_label="name" />
			<field name="role_" type="xref" xref_field="MolgenisRole.id" xref_label="name" />
			<unique fields="group_,role_"/>
		</entity>
		
		<entity name="Contact" implements="Identifiable" abstract="true">
			<description> A contact is either a person or an organization. Copied
				from FuGE::Contact.</description>
			<field name="Address" type="text" nillable="true"
				description="The address of the Contact." />
			<field name="Phone" nillable="true"
				description="The telephone number of the Contact including the suitable area codes." />
			<field name="Email" nillable="true"
				description="The email address of the Contact." />
			<field name="Fax" nillable="true" type="varchar"
				description="The fax number of the Contact." />
			<field name="tollFreePhone" nillable="true" type="string"
				description="A toll free phone number for the Contact, including suitable area codes." />		
			<field name="City" type="string" nillable="true"
				description="Added from the old definition of MolgenisUser. City of this contact." />/>
			<field name="Country" type="string" nillable="true" 
				description="Added from the old definition of MolgenisUser. Country of this contact." />	
		</entity>
		
		<entity name="Person" extends="MolgenisRole" implements="Contact" xref_label="name">
			<description>
				Person represents one or more people involved with an Investigation.
				This may include authors on a paper, lab personnel or PIs. Person
				has last name, firstname, mid initial, address, contact and email. A
				Person role is included to represent how a Person is involved with
				an investigation. For submission to repository purposes an allowed
				value is 'submitter' and the term is present in the MGED Ontology,
				an alternative use could represent job title. An Example from
				ArrayExpress is E-MTAB-506
				<a
					href="ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt">
					ftp://ftp.ebi.ac.uk/pub/databases/microarray/data/experiment/TABM/E-TABM-506/E-TABM-506.idf.txt.
				</a>
				.
				<br />
				The FUGE equivalent to Person is FuGE::Person.
			</description>
			<field name="FirstName" label="First Name" nillable="true" />
			<field name="MidInitials" label="Mid Initials" nillable="true" />
			<field name="LastName" label="Last Name" nillable="true"/>
			<field name="Title" label="Title" nillable="true" description="An academic title, e.g. Prof.dr, PhD" />
			<field name="Affiliation" type="xref" xref_entity="Institute"
				nillable="true" />
			<field name="Department" type="string" nillable="true" 
				description="Added from the old definition of MolgenisUser. Department of this contact." />	
			<field name="Roles" type="xref" xref_field="PersonRole.id"
				nillable="true" description="Indicate role of the contact, e.g. lab worker or PI. Changed from mref to xref in oct 2011." />
			<unique fields="FirstName,MidInitials,LastName" />
		</entity>
		
		<entity name="PersonRole" extends="OntologyTerm">
		<description>Seperate type of ontologyTerm to administrate roles.</description>
		</entity>
		
		<entity name="Institute" implements="Contact" xref_label="name">
			<description> A contact is either a person or an organization. Copied
				from FuGE::Contact.</description>
				<field name="name" unique="true"/>
		</entity>

		<entity name="MolgenisUser" extends="Person" decorator="decorators.MolgenisUserDecorator" system="true">
			<description>Anyone who can login</description>
			<field name="password_" type="string" default="secret" description="big fixme: password type" />
			<field name="activationCode" type="string"
				description="Used as alternative authentication mechanism to verify user email and/or if user has lost password."
				nillable="true" />
			<field name="active" type="bool" default="false"
				description="Boolean to indicate if this account can be used to login" />

			<field name="superuser" type="bool" default="false" />
			<!-- todo: profile: picture, field, address, zip, timezone, flag to set public email, website, other details -->
		</entity>
		<entity name="MolgenisPermission" system="true" implements="Identifiable">
			<field name="role_" type="xref" xref_field="MolgenisRole.id" xref_label="name"/>
			<field name="entity" type="xref" xref_field="MolgenisEntity.id" />
			<field name="permission" type="enum" enum_options="[read,write,own]"/>
			<unique fields="role_,entity,permission"/>
			<!-- no use case for 'execute' so don't use it -->
		</entity>
		<entity name="Authorizable" abstract="true" decorator="decorators.AuthorizableDecorator">
			<description>Interface for row level security</description>
			<field name="canRead" type="xref" xref_entity="MolgenisRole" xref_field="id" xref_label="name" nillable="true" />
			<field name="canWrite" type="xref" xref_entity="MolgenisRole" xref_field="id" xref_label="name" nillable="true"/>
			<field name="owns" nillable="false" type="xref" xref_entity="MolgenisRole" xref_field="id" xref_label="name" default="2"/>
		</entity>
	</module>
</molgenis>