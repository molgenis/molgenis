package org.molgenis.oneclickimporter.service.impl;

import au.com.bytecode.opencsv.CSVReader;
import org.apache.commons.io.input.BOMInputStream;
import org.molgenis.data.csv.CsvFileExtensions;
import org.molgenis.oneclickimporter.exceptions.EmptySheetException;
import org.molgenis.oneclickimporter.exceptions.InconsistentColumnCountException;
import org.molgenis.oneclickimporter.exceptions.MissingDataException;
import org.molgenis.oneclickimporter.service.CsvService;
import org.springframework.stereotype.Component;

import java.io.*;
import java.util.List;

import static java.nio.charset.StandardCharsets.UTF_8;

@Component
public class CsvServiceImpl implements CsvService
{
	@Override
	public List<String[]> buildLinesFromFile(File file) throws IOException
	{
		CSVReader reader = createCsvReader(file.getName(), removeByteOrderMark(new FileInputStream(file)));
		List<String[]> content = reader.readAll();
		validateCsvFile(content, file.getName());
		return content;
	}

	/**
	 * <p>Convert the inputstreams that can be generated by the CsvIterator and check on BOM-attachements.</p>
	 *
	 * @param inputStream from zipfile or normal files
	 * @return inputStream without ByteOrderMark (always)
	 */
	private InputStream removeByteOrderMark(InputStream inputStream)
	{
		return new BOMInputStream(inputStream, false);
	}

	private CSVReader createCsvReader(String fileName, InputStream in)
	{
		Reader reader = new InputStreamReader(in, UTF_8);

		if (fileName.toLowerCase().endsWith('.' + CsvFileExtensions.CSV.toString()) || fileName.toLowerCase()
																							   .endsWith('.'
																									   + CsvFileExtensions.TXT
																									   .toString()))
		{
			return new CSVReader(reader);
		}

		if (fileName.toLowerCase().endsWith('.' + CsvFileExtensions.TSV.toString()))
		{
			return new CSVReader(reader, '\t');
		}

		return new CSVReader(reader, CSV_SEPARATOR);
	}

	/**
	 * Validates CSV file content.
	 * <p>
	 * Checks that the content is not empty.
	 * Checks that at least one data row is present.
	 * Checks that data row lengths are consistent with the header row length.
	 *
	 * @param content  content of CSV-file
	 * @param fileName the name of the file that is validated
	 * @throws EmptySheetException,MissingDataException,InconsistentColumnCountException if the validation fails
	 */

	private void validateCsvFile(List<String[]> content, String fileName)
	{
		if (content.isEmpty())
		{
			throw new EmptySheetException("CSV file", fileName);
		}

		if (content.size() == 1)
		{
			throw new MissingDataException("CSV file", fileName);
		}

		int headerLength = content.get(0).length;
		content.forEach(row ->
		{
			if (row.length != headerLength)
			{
				throw new InconsistentColumnCountException(fileName);
			}
		});
	}
}